#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# fap4malware - File analyzation program to detect malware
# Malware scanner module
# Copyright (C) 2021 by Ralf Kilian
# Distributed under the MIT License (https://opensource.org/licenses/MIT)
#
# GitHub: https://github.com/urbanware-org/fap4malware
# GitHub: https://gitlab.com/urbanware-org/fap4malware
#

__version__ = "1.0.1"

import hashlib
import os
import definitions as defs


def get_version():
    """
        Return the version of this module.
    """
    return __version__


class Fap4Malware():
    """
        Class providing the fundamental file analyzation procedure.
    """

    # In case the 'scan_all' parameter is false scan files with the following
    # suffixes, only. Just a few typical examples:
    scan_suffixes = [
        "bat", "cmd", "com", "doc", "docx", "exe", "jar", "js", "pif", "vbs",
        "xls", "xlsx",
    ]

    def __init__(self):
        self.__count_alert = 0
        self.__count_denied = 0
        self.__count_dirs = 0
        self.__count_files = 0

    def print_result(self):
        """
            Print the last scan results.
        """
        count_total = self.__count_files + self.__count_dirs
        count = len(str(count_total))
        print()
        print(
            "Objects scanned:     %s" % str(count_total).rjust(count))
        print(
            "Files scanned:       %s" % str(self.__count_files).rjust(count))
        print(
            "Directories scanned: %s" % str(self.__count_dirs).rjust(count))
        print(
            "Missing permissions: %s" % str(self.__count_denied).rjust(count))
        print(
            "Infections found:    %s" % str(self.__count_alert).rjust(count))
        print(
            "Definition count:    %s" % str(len(defs.DEFLIST)).rjust(count))
        print()

    def scan(self, directory, recursive=True, scan_all=True):
        """
            Scan a directory for malicious files.
        """
        self.__reset()

        print()
        print("Scanning directory:   '%s'" % directory)
        if recursive:
            temp = "Yes"
        else:
            temp = "No"
        print("Scan recursively:     %s" % temp)
        if scan_all:
            temp = "Yes"
        else:
            temp = "No"
        print("Scan all files:       %s" % temp)
        print()

        self.__scan_files(directory, recursive, scan_all)
        self.print_result()

    def __reset(self):
        """
            Core method to reset the counters.
        """
        self.__count_alert = 0
        self.__count_denied = 0
        self.__count_dirs = 0
        self.__count_files = 0

    def __scan_files(self, directory, recursive, scan_all):
        """
            Core method to scan a directory for malicious files.
        """
        list_dirs = []
        list_files = []

        try:
            temp = os.listdir(directory)
            temp.sort()
            if temp:
                self.__count_dirs += 1
        except NotADirectoryError:
            print("[-] Not a directory: %s" % directory)
            return
        except FileNotFoundError:
            print("[?] Directory not found: %s" % directory)
            return
        except PermissionError:
            print("[x] Permission denied (directory): %s" % directory)
            self.__count_denied += 1
            return

        for item in temp:
            path = os.path.join(directory, item)
            if os.path.isfile(path):
                if not scan_all:
                    for suffix in self.scan_suffixes:
                        if path.endswith("." + suffix):
                            list_files.append(path)
                            break
                else:
                    list_files.append(path)
            elif os.path.isdir(path):
                if recursive:
                    list_dirs.append(path)
            else:
                pass

        list_files.sort()
        for item in list_files:
            try:
                with open(item, 'rb') as fh_file:
                    sha256 = hashlib.sha256()
                    while True:
                        content = fh_file.read(4096)
                        if not content:
                            break
                        sha256.update(content)
                    shasum = sha256.hexdigest()

                    if shasum in defs.DEFLIST:
                        print("[!] File: %s [INFECTED: %s]" %
                              (item, defs.DEFLIST[shasum]))
                        self.__count_alert += 1
                    else:
                        print("[ ] File: %s [OK]" % item)
                    self.__count_files += 1
            except PermissionError:
                print("[x] Permission denied (file): %s" % item)
                self.__count_denied += 1
                continue

        if recursive:
            for subdir in list_dirs:
                self.__scan_files(subdir, recursive, scan_all)

# EOF
