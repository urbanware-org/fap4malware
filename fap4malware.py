#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# fap4malware - File analyzation program to detect malware
# Malware scanner module
# Copyright (C) 2022 by Ralf Kilian
# Distributed under the MIT License (https://opensource.org/licenses/MIT)
#
# GitHub: https://github.com/urbanware-org/fap4malware
# GitHub: https://gitlab.com/urbanware-org/fap4malware
#

__version__ = "1.1.0"

import hashlib
import os


def get_version():
    """
        Return the version of this module.
    """
    return __version__


class Fap4Malware():
    """
        Class providing the fundamental file analyzation procedure.
    """

    __script_path = os.path.dirname(os.path.realpath(__file__))

    __count_alert = 0
    __count_denied = 0
    __count_dirs = 0
    __count_files = 0

    __definitions = {}
    __definitions_md5 = "definitions.md5"           # has  32 chars
    __definitions_sha1 = "definitions.sha1"         # has  40 chars
    __definitions_sha224 = "definitions.sha224"     # has  56 chars
    __definitions_sha256 = "definitions.sha256"     # has  64 chars
    __definitions_sha384 = "definitions.sha384"     # has  96 chars
    __definitions_sha512 = "definitions.sha512"     # has 128 chars
    __definitions_version = "version.def"

    # These characters can be replaced either with other ones (e.g. UTF-8) or
    # words as there is no length limit
    __status_clean = " "
    __status_infected = "!"
    __status_denied = "x"

    # In case the 'scan_all' parameter is false scan files with the following
    # suffixes, only. Just a few typical examples:
    scan_suffixes = [
        "bat", "cmd", "com", "doc", "docx", "exe", "jar", "js", "pif", "vbs",
        "xls", "xlsx",
    ]

    def __init__(self):
        return

    def print_result(self):
        """
            Print the last scan results.
        """
        count_total = self.__count_files + self.__count_dirs
        version_file = os.path.join(self.__script_path, "definitions",
                                    self.__definitions_version)
        with open(version_file, 'r') as fh_version:
            for line in fh_version:
                if not line.strip() == "":
                    definition_date = line.strip()
        rjust_width = len(str(definition_date))

        print()
        print("Objects scanned:      %s" %
              str(count_total).rjust(rjust_width))
        print("Files scanned:        %s" %
              str(self.__count_files).rjust(rjust_width))
        print("Directories scanned:  %s" %
              str(self.__count_dirs).rjust(rjust_width))
        print("Denied permissions:   %s" %
              str(self.__count_denied).rjust(rjust_width))
        print("Infections found:     %s" %
              str(self.__count_alert).rjust(rjust_width))
        print("Definition count:     %s" %
              str(len(self.__definitions)).rjust(rjust_width))
        print("Definition date:      %s" %
              str(definition_date).rjust(rjust_width))
        print()

    def read_def_file(self, filename):
        """
            Read a file that contains virus definitions.
        """
        filename = os.path.join(self.__script_path, "definitions", filename)
        if os.path.exists(filename):
            with open(filename) as file:
                for line in file:
                    if line.startswith("#"):
                        continue
                    df = line.replace("\n", "").replace("\"", "").split(",")
                    try:
                        name = df[1].strip()
                    except IndexError:
                        name = "Untitled signature"
                    sum = df[0].strip()

                    self.__definitions.update({sum: name})

    def scan(self, directory, recursive=True, scan_all=True):
        """
            Prepare and run the scan process.
        """
        print("\nLoading definition files...")

        if not self.__definitions:
            self.read_def_file(self.__definitions_md5)
            self.read_def_file(self.__definitions_sha1)
            self.read_def_file(self.__definitions_sha224)
            self.read_def_file(self.__definitions_sha256)
            self.read_def_file(self.__definitions_sha384)
            self.read_def_file(self.__definitions_sha256)
            self.read_def_file(self.__definitions_sha512)

        if len(self.__definitions) == 0:
            raise Exception("error: No definitions found.")
        print("Done.")

        print()
        print("Scanning directory:   %s" % directory)
        if recursive:
            value = "Yes"
        else:
            value = "No"
        print("Scan recursively:     %s" % value)
        if scan_all:
            value = "Yes"
        else:
            value = "No"
        print("Scan all files:       %s" % value)
        print()

        self.__reset()
        self.__scan_files(directory, recursive, scan_all)
        self.print_result()

    def __reset(self):
        """
            Core method to reset the counters.
        """
        self.__count_alert = 0
        self.__count_denied = 0
        self.__count_dirs = 0
        self.__count_files = 0

    def __scan_files(self, directory, recursive, scan_all):
        """
            Core method to scan a directory for malicious files.
        """
        list_dirs = []
        list_files = []

        try:
            dir_content = os.listdir(directory)
            dir_content.sort()
            if dir_content:
                self.__count_dirs += 1
        except NotADirectoryError:
            print("[-] Not a directory: %s" % directory)
            return
        except FileNotFoundError:
            print("[?] Directory not found: %s" % directory)
            return
        except PermissionError:
            print("[x] Permission denied (directory): %s" % directory)
            self.__count_denied += 1
            return

        for item in dir_content:
            path = os.path.join(directory, item)
            if os.path.isfile(path):
                if not scan_all:
                    for suffix in self.scan_suffixes:
                        if path.endswith("." + suffix):
                            list_files.append(path)
                            break
                else:
                    list_files.append(path)
            elif os.path.isdir(path):
                if recursive:
                    list_dirs.append(path)
            else:
                continue

        list_files.sort()
        for item in list_files:
            try:
                with open(item, 'rb') as fh_file:
                    md5 = hashlib.md5()
                    while True:
                        content = fh_file.read(4096)
                        if not content:
                            break
                        md5.update(content)
                    md5sum = md5.hexdigest()

                    sha1 = hashlib.sha1()
                    while True:
                        content = fh_file.read(4096)
                        if not content:
                            break
                        sha1.update(content)
                    sha1 = sha1.hexdigest()

                    sha224 = hashlib.sha224()
                    while True:
                        content = fh_file.read(4096)
                        if not content:
                            break
                        sha224.update(content)
                    sha224 = sha224.hexdigest()

                    sha256 = hashlib.sha256()
                    while True:
                        content = fh_file.read(4096)
                        if not content:
                            break
                        sha256.update(content)
                    sha256 = sha256.hexdigest()

                    sha384 = hashlib.sha384()
                    while True:
                        content = fh_file.read(4096)
                        if not content:
                            break
                        sha384.update(content)
                    sha384 = sha384.hexdigest()

                    sha512 = hashlib.sha512()
                    while True:
                        content = fh_file.read(4096)
                        if not content:
                            break
                        sha512.update(content)
                    sha512 = sha512.hexdigest()

                    if md5sum in self.__definitions:
                        print("[%s] File: %s [INFECTED: %s]" %
                              (self.__status_infected, item,
                               self.__definitions[md5sum]))
                        self.__count_alert += 1
                    else:
                        print("[%s] File: %s [OK]" %
                              (self.__status_clean, item))
                    self.__count_files += 1
            except PermissionError:
                print("[%s] Permission denied (file): %s" %
                      (self.__status_denied, item))
                self.__count_denied += 1
                continue

        if recursive:
            for subdir in list_dirs:
                self.__scan_files(subdir, recursive, scan_all)
